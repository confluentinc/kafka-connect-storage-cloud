/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.connect.s3.callback;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This event represents a callback Message */
@org.apache.avro.specific.AvroGenerated
public class Callback extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5786357167649199011L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Callback\",\"namespace\":\"io.confluent.connect.s3.callback\",\"doc\":\"This event represents a callback Message\",\"fields\":[{\"name\":\"topicName\",\"type\":\"string\",\"doc\":\"A unique event ID (UUID)\"},{\"name\":\"s3Partition\",\"type\":\"string\",\"doc\":\"A unique event ID (UUID)\"},{\"name\":\"filePath\",\"type\":\"string\",\"doc\":\"A unique event ID (UUID)\"},{\"name\":\"partition\",\"type\":\"int\",\"doc\":\"A unique event ID (UUID)\"},{\"name\":\"baseRecordTimestamp\",\"type\":\"long\",\"doc\":\"A unique event ID (UUID)\"},{\"name\":\"currentTimestamp\",\"type\":\"long\",\"doc\":\"A unique event ID (UUID)\"},{\"name\":\"recordCount\",\"type\":\"int\",\"doc\":\"A unique event ID (UUID)\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Callback> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Callback> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Callback> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Callback> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Callback> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Callback to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Callback from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Callback instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Callback fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** A unique event ID (UUID) */
  private java.lang.CharSequence topicName;
  /** A unique event ID (UUID) */
  private java.lang.CharSequence s3Partition;
  /** A unique event ID (UUID) */
  private java.lang.CharSequence filePath;
  /** A unique event ID (UUID) */
  private int partition;
  /** A unique event ID (UUID) */
  private long baseRecordTimestamp;
  /** A unique event ID (UUID) */
  private long currentTimestamp;
  /** A unique event ID (UUID) */
  private int recordCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Callback() {}

  /**
   * All-args constructor.
   * @param topicName A unique event ID (UUID)
   * @param s3Partition A unique event ID (UUID)
   * @param filePath A unique event ID (UUID)
   * @param partition A unique event ID (UUID)
   * @param baseRecordTimestamp A unique event ID (UUID)
   * @param currentTimestamp A unique event ID (UUID)
   * @param recordCount A unique event ID (UUID)
   */
  public Callback(java.lang.CharSequence topicName, java.lang.CharSequence s3Partition, java.lang.CharSequence filePath, java.lang.Integer partition, java.lang.Long baseRecordTimestamp, java.lang.Long currentTimestamp, java.lang.Integer recordCount) {
    this.topicName = topicName;
    this.s3Partition = s3Partition;
    this.filePath = filePath;
    this.partition = partition;
    this.baseRecordTimestamp = baseRecordTimestamp;
    this.currentTimestamp = currentTimestamp;
    this.recordCount = recordCount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return topicName;
    case 1: return s3Partition;
    case 2: return filePath;
    case 3: return partition;
    case 4: return baseRecordTimestamp;
    case 5: return currentTimestamp;
    case 6: return recordCount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: topicName = (java.lang.CharSequence)value$; break;
    case 1: s3Partition = (java.lang.CharSequence)value$; break;
    case 2: filePath = (java.lang.CharSequence)value$; break;
    case 3: partition = (java.lang.Integer)value$; break;
    case 4: baseRecordTimestamp = (java.lang.Long)value$; break;
    case 5: currentTimestamp = (java.lang.Long)value$; break;
    case 6: recordCount = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'topicName' field.
   * @return A unique event ID (UUID)
   */
  public java.lang.CharSequence getTopicName() {
    return topicName;
  }


  /**
   * Sets the value of the 'topicName' field.
   * A unique event ID (UUID)
   * @param value the value to set.
   */
  public void setTopicName(java.lang.CharSequence value) {
    this.topicName = value;
  }

  /**
   * Gets the value of the 's3Partition' field.
   * @return A unique event ID (UUID)
   */
  public java.lang.CharSequence getS3Partition() {
    return s3Partition;
  }


  /**
   * Sets the value of the 's3Partition' field.
   * A unique event ID (UUID)
   * @param value the value to set.
   */
  public void setS3Partition(java.lang.CharSequence value) {
    this.s3Partition = value;
  }

  /**
   * Gets the value of the 'filePath' field.
   * @return A unique event ID (UUID)
   */
  public java.lang.CharSequence getFilePath() {
    return filePath;
  }


  /**
   * Sets the value of the 'filePath' field.
   * A unique event ID (UUID)
   * @param value the value to set.
   */
  public void setFilePath(java.lang.CharSequence value) {
    this.filePath = value;
  }

  /**
   * Gets the value of the 'partition' field.
   * @return A unique event ID (UUID)
   */
  public int getPartition() {
    return partition;
  }


  /**
   * Sets the value of the 'partition' field.
   * A unique event ID (UUID)
   * @param value the value to set.
   */
  public void setPartition(int value) {
    this.partition = value;
  }

  /**
   * Gets the value of the 'baseRecordTimestamp' field.
   * @return A unique event ID (UUID)
   */
  public long getBaseRecordTimestamp() {
    return baseRecordTimestamp;
  }


  /**
   * Sets the value of the 'baseRecordTimestamp' field.
   * A unique event ID (UUID)
   * @param value the value to set.
   */
  public void setBaseRecordTimestamp(long value) {
    this.baseRecordTimestamp = value;
  }

  /**
   * Gets the value of the 'currentTimestamp' field.
   * @return A unique event ID (UUID)
   */
  public long getCurrentTimestamp() {
    return currentTimestamp;
  }


  /**
   * Sets the value of the 'currentTimestamp' field.
   * A unique event ID (UUID)
   * @param value the value to set.
   */
  public void setCurrentTimestamp(long value) {
    this.currentTimestamp = value;
  }

  /**
   * Gets the value of the 'recordCount' field.
   * @return A unique event ID (UUID)
   */
  public int getRecordCount() {
    return recordCount;
  }


  /**
   * Sets the value of the 'recordCount' field.
   * A unique event ID (UUID)
   * @param value the value to set.
   */
  public void setRecordCount(int value) {
    this.recordCount = value;
  }

  /**
   * Creates a new Callback RecordBuilder.
   * @return A new Callback RecordBuilder
   */
  public static io.confluent.connect.s3.callback.Callback.Builder newBuilder() {
    return new io.confluent.connect.s3.callback.Callback.Builder();
  }

  /**
   * Creates a new Callback RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Callback RecordBuilder
   */
  public static io.confluent.connect.s3.callback.Callback.Builder newBuilder(io.confluent.connect.s3.callback.Callback.Builder other) {
    if (other == null) {
      return new io.confluent.connect.s3.callback.Callback.Builder();
    } else {
      return new io.confluent.connect.s3.callback.Callback.Builder(other);
    }
  }

  /**
   * Creates a new Callback RecordBuilder by copying an existing Callback instance.
   * @param other The existing instance to copy.
   * @return A new Callback RecordBuilder
   */
  public static io.confluent.connect.s3.callback.Callback.Builder newBuilder(io.confluent.connect.s3.callback.Callback other) {
    if (other == null) {
      return new io.confluent.connect.s3.callback.Callback.Builder();
    } else {
      return new io.confluent.connect.s3.callback.Callback.Builder(other);
    }
  }

  /**
   * RecordBuilder for Callback instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Callback>
    implements org.apache.avro.data.RecordBuilder<Callback> {

    /** A unique event ID (UUID) */
    private java.lang.CharSequence topicName;
    /** A unique event ID (UUID) */
    private java.lang.CharSequence s3Partition;
    /** A unique event ID (UUID) */
    private java.lang.CharSequence filePath;
    /** A unique event ID (UUID) */
    private int partition;
    /** A unique event ID (UUID) */
    private long baseRecordTimestamp;
    /** A unique event ID (UUID) */
    private long currentTimestamp;
    /** A unique event ID (UUID) */
    private int recordCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.connect.s3.callback.Callback.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.topicName)) {
        this.topicName = data().deepCopy(fields()[0].schema(), other.topicName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.s3Partition)) {
        this.s3Partition = data().deepCopy(fields()[1].schema(), other.s3Partition);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.filePath)) {
        this.filePath = data().deepCopy(fields()[2].schema(), other.filePath);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.partition)) {
        this.partition = data().deepCopy(fields()[3].schema(), other.partition);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.baseRecordTimestamp)) {
        this.baseRecordTimestamp = data().deepCopy(fields()[4].schema(), other.baseRecordTimestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.currentTimestamp)) {
        this.currentTimestamp = data().deepCopy(fields()[5].schema(), other.currentTimestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.recordCount)) {
        this.recordCount = data().deepCopy(fields()[6].schema(), other.recordCount);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Callback instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.connect.s3.callback.Callback other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.topicName)) {
        this.topicName = data().deepCopy(fields()[0].schema(), other.topicName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.s3Partition)) {
        this.s3Partition = data().deepCopy(fields()[1].schema(), other.s3Partition);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.filePath)) {
        this.filePath = data().deepCopy(fields()[2].schema(), other.filePath);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.partition)) {
        this.partition = data().deepCopy(fields()[3].schema(), other.partition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.baseRecordTimestamp)) {
        this.baseRecordTimestamp = data().deepCopy(fields()[4].schema(), other.baseRecordTimestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currentTimestamp)) {
        this.currentTimestamp = data().deepCopy(fields()[5].schema(), other.currentTimestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.recordCount)) {
        this.recordCount = data().deepCopy(fields()[6].schema(), other.recordCount);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'topicName' field.
      * A unique event ID (UUID)
      * @return The value.
      */
    public java.lang.CharSequence getTopicName() {
      return topicName;
    }


    /**
      * Sets the value of the 'topicName' field.
      * A unique event ID (UUID)
      * @param value The value of 'topicName'.
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder setTopicName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.topicName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'topicName' field has been set.
      * A unique event ID (UUID)
      * @return True if the 'topicName' field has been set, false otherwise.
      */
    public boolean hasTopicName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'topicName' field.
      * A unique event ID (UUID)
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder clearTopicName() {
      topicName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 's3Partition' field.
      * A unique event ID (UUID)
      * @return The value.
      */
    public java.lang.CharSequence getS3Partition() {
      return s3Partition;
    }


    /**
      * Sets the value of the 's3Partition' field.
      * A unique event ID (UUID)
      * @param value The value of 's3Partition'.
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder setS3Partition(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.s3Partition = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 's3Partition' field has been set.
      * A unique event ID (UUID)
      * @return True if the 's3Partition' field has been set, false otherwise.
      */
    public boolean hasS3Partition() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 's3Partition' field.
      * A unique event ID (UUID)
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder clearS3Partition() {
      s3Partition = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'filePath' field.
      * A unique event ID (UUID)
      * @return The value.
      */
    public java.lang.CharSequence getFilePath() {
      return filePath;
    }


    /**
      * Sets the value of the 'filePath' field.
      * A unique event ID (UUID)
      * @param value The value of 'filePath'.
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder setFilePath(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.filePath = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'filePath' field has been set.
      * A unique event ID (UUID)
      * @return True if the 'filePath' field has been set, false otherwise.
      */
    public boolean hasFilePath() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'filePath' field.
      * A unique event ID (UUID)
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder clearFilePath() {
      filePath = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'partition' field.
      * A unique event ID (UUID)
      * @return The value.
      */
    public int getPartition() {
      return partition;
    }


    /**
      * Sets the value of the 'partition' field.
      * A unique event ID (UUID)
      * @param value The value of 'partition'.
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder setPartition(int value) {
      validate(fields()[3], value);
      this.partition = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'partition' field has been set.
      * A unique event ID (UUID)
      * @return True if the 'partition' field has been set, false otherwise.
      */
    public boolean hasPartition() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'partition' field.
      * A unique event ID (UUID)
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder clearPartition() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'baseRecordTimestamp' field.
      * A unique event ID (UUID)
      * @return The value.
      */
    public long getBaseRecordTimestamp() {
      return baseRecordTimestamp;
    }


    /**
      * Sets the value of the 'baseRecordTimestamp' field.
      * A unique event ID (UUID)
      * @param value The value of 'baseRecordTimestamp'.
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder setBaseRecordTimestamp(long value) {
      validate(fields()[4], value);
      this.baseRecordTimestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'baseRecordTimestamp' field has been set.
      * A unique event ID (UUID)
      * @return True if the 'baseRecordTimestamp' field has been set, false otherwise.
      */
    public boolean hasBaseRecordTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'baseRecordTimestamp' field.
      * A unique event ID (UUID)
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder clearBaseRecordTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentTimestamp' field.
      * A unique event ID (UUID)
      * @return The value.
      */
    public long getCurrentTimestamp() {
      return currentTimestamp;
    }


    /**
      * Sets the value of the 'currentTimestamp' field.
      * A unique event ID (UUID)
      * @param value The value of 'currentTimestamp'.
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder setCurrentTimestamp(long value) {
      validate(fields()[5], value);
      this.currentTimestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'currentTimestamp' field has been set.
      * A unique event ID (UUID)
      * @return True if the 'currentTimestamp' field has been set, false otherwise.
      */
    public boolean hasCurrentTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'currentTimestamp' field.
      * A unique event ID (UUID)
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder clearCurrentTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordCount' field.
      * A unique event ID (UUID)
      * @return The value.
      */
    public int getRecordCount() {
      return recordCount;
    }


    /**
      * Sets the value of the 'recordCount' field.
      * A unique event ID (UUID)
      * @param value The value of 'recordCount'.
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder setRecordCount(int value) {
      validate(fields()[6], value);
      this.recordCount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'recordCount' field has been set.
      * A unique event ID (UUID)
      * @return True if the 'recordCount' field has been set, false otherwise.
      */
    public boolean hasRecordCount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'recordCount' field.
      * A unique event ID (UUID)
      * @return This builder.
      */
    public io.confluent.connect.s3.callback.Callback.Builder clearRecordCount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Callback build() {
      try {
        Callback record = new Callback();
        record.topicName = fieldSetFlags()[0] ? this.topicName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.s3Partition = fieldSetFlags()[1] ? this.s3Partition : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.filePath = fieldSetFlags()[2] ? this.filePath : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.partition = fieldSetFlags()[3] ? this.partition : (java.lang.Integer) defaultValue(fields()[3]);
        record.baseRecordTimestamp = fieldSetFlags()[4] ? this.baseRecordTimestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.currentTimestamp = fieldSetFlags()[5] ? this.currentTimestamp : (java.lang.Long) defaultValue(fields()[5]);
        record.recordCount = fieldSetFlags()[6] ? this.recordCount : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Callback>
    WRITER$ = (org.apache.avro.io.DatumWriter<Callback>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Callback>
    READER$ = (org.apache.avro.io.DatumReader<Callback>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.topicName);

    out.writeString(this.s3Partition);

    out.writeString(this.filePath);

    out.writeInt(this.partition);

    out.writeLong(this.baseRecordTimestamp);

    out.writeLong(this.currentTimestamp);

    out.writeInt(this.recordCount);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.topicName = in.readString(this.topicName instanceof Utf8 ? (Utf8)this.topicName : null);

      this.s3Partition = in.readString(this.s3Partition instanceof Utf8 ? (Utf8)this.s3Partition : null);

      this.filePath = in.readString(this.filePath instanceof Utf8 ? (Utf8)this.filePath : null);

      this.partition = in.readInt();

      this.baseRecordTimestamp = in.readLong();

      this.currentTimestamp = in.readLong();

      this.recordCount = in.readInt();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.topicName = in.readString(this.topicName instanceof Utf8 ? (Utf8)this.topicName : null);
          break;

        case 1:
          this.s3Partition = in.readString(this.s3Partition instanceof Utf8 ? (Utf8)this.s3Partition : null);
          break;

        case 2:
          this.filePath = in.readString(this.filePath instanceof Utf8 ? (Utf8)this.filePath : null);
          break;

        case 3:
          this.partition = in.readInt();
          break;

        case 4:
          this.baseRecordTimestamp = in.readLong();
          break;

        case 5:
          this.currentTimestamp = in.readLong();
          break;

        case 6:
          this.recordCount = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










